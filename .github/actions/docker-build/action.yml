name: Build docker container image
description: Build docker container image. Dockerfile should be in devop/

inputs:
  aws-access-key-id:
    description: 'AWS key for ECR access'
    required: true
  aws-secret-access-key:
    description: 'AWS secret for ECR access'
    required: true
  aws-region:
    description: 'AWS region'
    required: true
  ecr-repo-prefix:
    description: 'ECR repository prefix, the OCI url that Helm uses.'
    required: true
  image-tag:
    description: 'application container image version'
    required: false
    default: test
outputs:
  image: 
    description: Docker image name
    value: ${{ steps.build-image.outputs.IMAGE }}
  ecr-repository:
    description: Repository that the image is stored
    value: ${{ steps.build-image.outputs.ECR_REPOSITORY }}
  image-tag:
    description: Docker image tag
    value: ${{ steps.build-image.outputs.IMAGE_TAG }}
runs:
  using: composite
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build and tag docker image
      id: build-image
      shell: bash
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repo-prefix }}/${{ github.event.repository.name }}
        IMAGE_TAG: ${{ inputs.image-tag }}
      run: |
        mv devops/Dockerfile .
        image=$(echo ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }})
        docker build --tag ${image} .
        echo "ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
        echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
        echo "IMAGE=$(echo ${image}" >> $GITHUB_OUTPUT

